@page "/blogPost/{blogPostId}"
@using LinkDotNet.Domain
@using LinkDotNet.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Shared.Admin
@using Markdig
@inject IRepository _repository
@inject IJSRuntime _jsRuntime
@inherits MarkdownComponentBase

@if (BlogPost == null)
{
    <h3>Loading...</h3>
}
else
{
    <Title Value="@BlogPost.Title"></Title>
    <OgData Title="@BlogPost.Title" 
            AbsolutePreviewImageUrl="@BlogPost.PreviewImageUrl" 
            Description="@(Markdown.ToPlainText(BlogPost.ShortDescription))"
            Keywords="@Tags"></OgData>
    <div class="blog-outer-box">
        <div class="content blog-container">
            <div class="blog-content">
                <header>
                    <h1>@BlogPost.Title</h1></header>
                <div class="blogpost-date">
                    @BlogPost.UpdatedDate.ToString("dd/MM/yyyy")
                </div>

                <div class="admin-action">
                    <BlogPostAdminActions BlogPostId="@BlogPostId"></BlogPostAdminActions>
                </div>

                <div class="blogpost-content">
                    @(RenderMarkupString(BlogPost.Content))
                </div>
            </div>
            <Like BlogPost="@BlogPost" OnBlogPostLiked="@UpdateLikes"></Like>
        </div>
    </div>
}

@code {
    [Parameter]
    public string BlogPostId { get; set; }

    private string Tags => BlogPost?.Tags != null
        ? string.Join(",", BlogPost.Tags.Select(b => b.Content))
        : null;
    
    private BlogPost BlogPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BlogPost = await _repository.GetByIdAsync(BlogPostId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("hljs.highlightAll");
            StateHasChanged();
        }
    }

    private async Task UpdateLikes(bool hasLiked)
    {
        BlogPost = await _repository.GetByIdAsync(BlogPostId);
        BlogPost.Likes = hasLiked ? BlogPost.Likes + 1 : BlogPost.Likes - 1;
        await _repository.StoreAsync(BlogPost);
    }
}