@page "/blogPost/{blogPostId}"
@using LinkDotNet.Domain
@using LinkDotNet.Blog.Web.Shared.Admin
@using LinkDotNet.Blog.Web.Shared.Services
@using LinkDotNet.Infrastructure.Persistence
@using Markdig
@using Toolbelt.Blazor.HeadElement
@inject IRepository<BlogPost> blogPostRepository
@inject IJSRuntime jsRuntime
@inject IUserRecordService userRecordService
@inject ICommentService commentService
@inherits MarkdownComponentBase

<div class="page">
    @if (BlogPost == null)
    {
        <h3>Loading...</h3>
    }
    else
    {
        <Title>@BlogPost.Title</Title>
        <OgData Title="@BlogPost.Title" 
                AbsolutePreviewImageUrl="@BlogPost.PreviewImageUrl" 
                Description="@(Markdown.ToPlainText(BlogPost.ShortDescription))"
                Keywords="@Tags"></OgData>
        <div class="blog-outer-box">
            <div class="content blog-container">
                <div class="blog-content">
                    <header>
                        <h1>@BlogPost.Title</h1></header>
                    <div class="blogpost-date">
                        @BlogPost.UpdatedDate.ToString("dd/MM/yyyy")
                    </div>

                    <div class="admin-action">
                        <BlogPostAdminActions BlogPostId="@BlogPostId"></BlogPostAdminActions>
                    </div>

                    <div class="blogpost-content">
                        @(RenderMarkupString(BlogPost.Content))
                    </div>
                </div>
                <Like BlogPost="@BlogPost" OnBlogPostLiked="@UpdateLikes"></Like>
                <div class="giscus">
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string BlogPostId { get; set; }

    private string Tags => BlogPost?.Tags != null
        ? string.Join(",", BlogPost.Tags.Select(b => b.Content))
        : null;
    
    private BlogPost BlogPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BlogPost = await blogPostRepository.GetByIdAsync(BlogPostId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await userRecordService.StoreUserRecordAsync();
            await jsRuntime.InvokeVoidAsync("hljs.highlightAll");
            await commentService.EnableCommentSection("giscus");
            StateHasChanged();
        }
    }

    private async Task UpdateLikes(bool hasLiked)
    {
        BlogPost = await blogPostRepository.GetByIdAsync(BlogPostId);
        BlogPost.Likes = hasLiked ? BlogPost.Likes + 1 : BlogPost.Likes - 1;
        await blogPostRepository.StoreAsync(BlogPost);
    }
}