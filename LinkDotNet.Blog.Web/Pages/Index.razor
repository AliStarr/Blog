@page "/"
@using LinkDotNet.Domain
@using LinkDotNet.Infrastructure.Persistence
@using Markdig
@using X.PagedList
@inject IRepository repository
@inject AppConfiguration appConfiguration
@inject NavigationManager navigationManager

<OgData Title="@(Markdown.ToPlainText(appConfiguration.BlogName))" 
        AbsolutePreviewImageUrl="@GetAbsolutePreviewImageUrl()"
        Description="@(Markdown.ToPlainText(appConfiguration.Introduction.Description))"></OgData>
<section class="introduction">
    <IntroductionCard Introduction="appConfiguration.Introduction"></IntroductionCard>
</section>

<section>
    <header>
        <div class="recent-posts">
            <h1>Recent Posts</h1>
        </div>
    </header>
    <div class="content px-4">
        @for (var i = 0; i < currentPage.Count; i++)
        {
            <ShortBlogPost BlogPost="currentPage[i]" UseAlternativeStyle="@(i % 2 != 0)"></ShortBlogPost>
        }
    </div>
    <BlogPostNavigation CurrentPage="@currentPage" OnPageChanged="@GetPage"></BlogPostNavigation>
</section>

@code {
    IPagedList<BlogPost> currentPage = new PagedList<BlogPost>(null, 1, 1);

    protected override async Task OnInitializedAsync()
    {
        currentPage = await repository.GetAllAsync(p => p.IsPublished, b => b.UpdatedDate, pageSize: appConfiguration.BlogPostsPerPage);
    }

    private string GetAbsolutePreviewImageUrl()
    {
        var backgroundUrl = appConfiguration.Introduction.BackgroundUrl;
        if (IsAbsoluteUrl(backgroundUrl))
        {
            return backgroundUrl;
        }

        var successful = Uri.TryCreate(new Uri(navigationManager.BaseUri, UriKind.Absolute), new Uri(backgroundUrl, UriKind.RelativeOrAbsolute), out var uri);
        return successful ? uri.ToString() : backgroundUrl;
    }
    
    private bool IsAbsoluteUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out _);
    }

    private async Task GetPage(int newPage)
    {
        currentPage = await repository.GetAllAsync(p => p.IsPublished, b => b.UpdatedDate, pageSize: appConfiguration.BlogPostsPerPage, page: 
        newPage);
    }
}