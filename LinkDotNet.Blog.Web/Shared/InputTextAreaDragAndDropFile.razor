<style>
    .can-drop {
            border: 2px dashed green;
        }
</style>
<div>
    <InputTextArea
        @attributes="AdditionalAttributes"
        class="@CssClass"
        @bind-Value="@BindingValue"
        ondragover="event.stopPropagation(); event.preventDefault();"
        ondragstart="event.stopPropagation(); event.preventDefault();"
        ondragexit="event.stopPropagation(); event.preventDefault();"
        ondragend="event.stopPropagation(); event.preventDefault();"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave"/>
</div>

@code {
    private string dropClass = string.Empty;
    private string otherClasses = string.Empty;
    private string CssClass => dropClass + " " + otherClasses;
    
    private string value;

    [Parameter]
    public string BindingValue
    {
        get => value;
        set
        {
            if (this.value == value ) return;
            this.value = value;
            BindingValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }  
    
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    protected override void OnParametersSet()
    {
        if (AdditionalAttributes != null && AdditionalAttributes.ContainsKey("class"))
        {
            otherClasses = AdditionalAttributes["class"].ToString();
        }
    }

    private void HandleDrop(DragEventArgs args)
    {
        dropClass = string.Empty;
        //// This will only work with .NET 6
        // var files = args.DataTransfer.Files;
    }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }
}