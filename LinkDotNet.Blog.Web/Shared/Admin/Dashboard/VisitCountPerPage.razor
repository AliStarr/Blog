@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@using System.Linq.Expressions
@using LinkDotNet.Blog.Infrastructure.Persistence.Sql
@using Microsoft.EntityFrameworkCore
@inject BlogDbContext blogDbContext

<div class="card">
    <div class="card-header">Blog Post Visit Counts</div>
    <div class="card-body">
        <div class="row">
            <DateRangeSelector DateTimeSpanChanged="RefreshVisitCount"></DateRangeSelector>
            <table class="table table-striped table-hover">
                <tbody>
                <tr>
                    <th>Title</th>
                    <th>Clicks</th>
                    <th>Likes</th>
                </tr>
                @if (visitData != null)
                {
                    @foreach (var date in visitData)
                    {
                        <tr>
                            <td><a href="blogPost/@date.Id">@date.Title</a></td>
                            <td>@date.ClickCount</td>
                            <td>@date.Likes</td>
                        </tr>
                    }
                }
                else
                {
                    <Loading></Loading>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    private DateTime startDate = DateTime.MinValue;
    private IList<VisitCountPageData> visitData;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogPostInformationAsync();
    }

    private async Task LoadBlogPostInformationAsync()
    {
        visitData = await (from ur in blogDbContext.UserRecords
            where ur.DateTimeUtcClicked >= startDate
            join bp in blogDbContext.BlogPosts
                on ur.UrlClicked.Replace("blogPost/", string.Empty) equals bp.Id
            group new { ur, bp } by new { ur.UrlClicked }
            into gp
            orderby gp.Count() descending
            select new VisitCountPageData
            {
                Id = gp.FirstOrDefault().bp.Id,
                Title = gp.FirstOrDefault().bp.Title,
                Likes = gp.FirstOrDefault().bp.Likes,
                ClickCount = gp.Count()
            }).ToListAsync();
    }

    private async Task RefreshVisitCount(DateTime newBeginning)
    {
        startDate = newBeginning;
        await LoadBlogPostInformationAsync();
    }
}