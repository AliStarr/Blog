@using LinkDotNet.Blog.Domain
@inherits MarkdownComponentBase

<h3>@Title</h3>

<div class="content-area">
    <div class="new-content">
        <EditForm Model="@model" OnValidSubmit="OnValidBlogPostCreatedAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="title">Title</label>
                <InputText class="form-control" id="title" @bind-Value="model.Title"
                           @oninput="args => model.Title = args.Value.ToString()"/>
            </div>
            <div class="mb-3">
                <label for="short">Short Description</label>
                <InputTextArea class="form-control" id="short" @bind-Value="model.ShortDescription" rows="4"
                @oninput="args => model.ShortDescription = args.Value.ToString()"/>
                <small id="short" class="form-text text-muted">You can use markdown to style your component.</small>
            </div>
            <div class="mb-3">
                <label for="content">Content</label>
                <InputTextArea class="form-control" id="content" @bind-Value="model.Content" @oninput="args => model.Content = args.Value.ToString()" rows="10" />
                <small id="content" class="form-text text-muted">You can use markdown to style your component. Additional features are listed <a @onclick="@(() => FeatureDialog.Open())">here</a></small>
                @* <small id="content" class="form-text text-muted">Drag and drop images to upload and insert picture.</small> *@
            </div>
            <div class="mb-3">
                <label for="preview">Preview-Url</label>
                <InputText class="form-control" id="preview" @bind-Value="model.PreviewImageUrl"/>
            </div>
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="published" @bind-Value="model.IsPublished" />
                <label class="form-check-label" for="published">Publish</label><br/>
                <small id="published" class="form-text text-muted">If this blog post is only draft uncheck the box</small>
            </div>
            <div class="mb-3">
                <label for="tags">Tags</label>
                <InputText class="form-control" id="tags" @bind-Value="model.Tags"/>
            </div>
            @if (BlogPost != null)
            {
                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="updatedate" @bind-Value="model.ShouldUpdateDate" />
                    <label class="form-check-label" for="updatedate">Update Publish Date?</label><br/>
                    <small id="updatedate" class="form-text text-muted">If set the publish date is set to now, otherwise its original date</small>
                </div>
            }
            <button class="btn btn-primary" type="submit">Submit</button>
        </EditForm>
    </div>
    <div class="preview">
        <div>
            <header>
                <h1>@model.Title</h1>
            </header>
            <div>
                @(RenderMarkupString(model.ShortDescription))
            </div>
            <div>
                @(RenderMarkupString(model.Content))
            </div>
        </div>
    </div>
</div>
<FeatureInfoDialog @ref="FeatureDialog"></FeatureInfoDialog>

@code {
    [Parameter]
    public BlogPost BlogPost { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    [Parameter]
    public EventCallback<BlogPost> OnBlogPostCreated { get; set; }

    [Parameter]
    public bool ClearAfterCreated { get; set; } = true;

    private FeatureInfoDialog FeatureDialog { get; set; }

    private CreateNewModel model = new();

    protected override void OnParametersSet()
    {
        if (BlogPost == null)
        {
            return;
        }

        model = CreateNewModel.FromBlogPost(BlogPost);
    }

    private async Task OnValidBlogPostCreatedAsync()
    {
        await OnBlogPostCreated.InvokeAsync(model.ToBlogPost());
        ClearModel();
    }
    
    private void ClearModel()
    {
        if (ClearAfterCreated)
        {
            model = new CreateNewModel();
        }
    }
}