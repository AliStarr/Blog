@using LinkDotNet.Domain
@inherits MarkdownComponentBase
<div class="profile">
    <div class="profile-name">
        <span>@ProfileInformation.Name</span>
        <br/>
        <span>@ProfileInformation.Heading</span>
    </div>
    <div class="profile-image">
        <img src="@ProfileInformation.ProfilePictureUrl" alt="Profile Picture" /> 
    </div>
    <ul class="profile-keypoints">
        @foreach (var entry in ProfileInformationEntries)
        {
            <li>
                @if (IsAuthenticated)
                {
                    <button type="button" class="btn btn-default" aria-label="Delete Item" @onclick="() => 
                    ShowDeleteDialog(entry.Key)">
                        <i class="fas fa-trash-alt" aria-hidden="true"></i>
                    </button>
                }
                <bold>@RenderMarkupString(entry.Key)</bold>: @RenderMarkupString(entry.Value)
            </li>
        }
        @if (IsAuthenticated)
        {
            <AddProfileShortItem ValueAdded="@AddValue"></AddProfileShortItem>
        }
    </ul>
</div>

<ConfirmDialog @ref="Dialog" Content="Do you really want to delete this entry?" Title="Delete" 
OnYesPressed="DeleteItem"></ConfirmDialog>

@code {
    [Parameter]
    public ProfileInformation ProfileInformation { get; set; }
    
    [Parameter]
    public bool IsAuthenticated { get; set; }
    
    [Parameter]
    public EventCallback<IList<ProfileInformationEntry>> ProfileInformationCollectionChanged { get; set; }

    [Parameter]
    public IList<ProfileInformationEntry> ProfileInformationEntries { get; set; } = new List<ProfileInformationEntry>();
    
    private ConfirmDialog Dialog { get; set; }

    private string currentDeleteKey;

    private void ShowDeleteDialog(string key)
    {
        currentDeleteKey = key;
        Dialog.Open();
    }

    private async Task DeleteItem()
    {
        var entryToDelete = ProfileInformationEntries.Single(p => p.Key == currentDeleteKey);
        ProfileInformationEntries.Remove(entryToDelete);
        await ProfileInformationCollectionChanged.InvokeAsync(ProfileInformationEntries);
    }

    private async Task AddValue(KeyValuePair<string, string> toAdd)
    {
        var newEntry = new ProfileInformationEntry
        {
            Key = toAdd.Key,
            Value = toAdd.Value,
        };
        
        ProfileInformationEntries.Add(newEntry);
        await ProfileInformationCollectionChanged.InvokeAsync(ProfileInformationEntries);
    }
}