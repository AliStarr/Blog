@using LinkDotNet.Domain
<div class="skill-table-container">
    <div>
        @if (IsAuthenticated)
        {
            <button type="button" class="btn btn-primary" @onclick="() => AddSkillDialog.Open()"><i class="fas
            fa-plus-square"></i>
                Add skill</button>
            <AddSkillDialog @ref="AddSkillDialog" SkillAdded="@AddSkill"></AddSkillDialog>
        }
    </div>
    <div>
        <table class="skill-table">
            <tbody>
            <tr>
                <th>Capability</th>
                <th>Familiar with</th>
                <th>Proficient</th>
                <th>Expert</th>
            </tr>
            @foreach (var skillCapabilityGroup in skills.GroupBy(s => s.Capability))
            {
                <tr ondragover="event.preventDefault();">
                    <td>@skillCapabilityGroup.Key</td>
                    @foreach (var skillLevel in ProficiencyLevel.All)
                    {
                        <td @ondrop="@(() => HandleDrop(skillLevel))">
                            @foreach (var skill in skillCapabilityGroup.Where(s => s.ProficiencyLevel == skillLevel))
                            {
                                @if (IsAuthenticated)
                                {
                                    <div draggable="true" @ondrag="@(() => currentDragItem = skill)" style="cursor: grab">
                                        <SkillTag Skill="@skill"/>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <SkillTag Skill="@skill"/>
                                    </div>
                                }
                            }
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>
@code {
    [Parameter]
    public bool IsAuthenticated { get; set; }

    private AddSkillDialog AddSkillDialog { get; set; }

    private List<Skill> skills = new();

    private Skill currentDragItem;

    private Task AddSkill(Skill skillToAdd)
    {
        skills.Add(skillToAdd);
        return Task.CompletedTask;
    }

    private void HandleDrop(ProficiencyLevel proficiencyLevel)
    {
        if (currentDragItem == null || currentDragItem.ProficiencyLevel == proficiencyLevel)
        {
            return;
        }

        currentDragItem.ProficiencyLevel = proficiencyLevel;
        currentDragItem = null;
    }

}