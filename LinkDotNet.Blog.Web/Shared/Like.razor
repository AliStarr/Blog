@using LinkDotNet.Blog.Web.Shared.Services
@using LinkDotNet.Blog.Domain
@inject ILocalStorageService localStorage
<div class="like-container">
    <button class="btn @BtnClass" @onclick="LikeBlogPost"><i class="far fa-thumbs-up"></i> @BlogPost.Likes @LikeText</button>
</div>

@code {
    [Parameter]
    public BlogPost BlogPost { get; set; }

    [Parameter] 
    public EventCallback<bool> OnBlogPostLiked { get; set; }
    
    private bool HasLiked { get; set; }

    private string BtnClass => HasLiked ? "btn-secondary" : "btn-primary";

    private string LikeText => BlogPost.Likes == 1 ? "Like" : "Likes";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HasLiked = await GetHasLiked();
            StateHasChanged();
        }
    }

    private async Task LikeBlogPost()
    {
        // Prevent multiple open sites to like / unlike multiple times
        var hasLikedFromLocalStorage = await GetHasLiked();
        if (HasLiked != hasLikedFromLocalStorage)
        {
            return;
        }
        
        HasLiked = !HasLiked;
        await OnBlogPostLiked.InvokeAsync(HasLiked);
        await localStorage.SetItemAsync($"hasLiked/{BlogPost.Id}", HasLiked);
    }

    private async Task<bool> GetHasLiked()
    {
        if (await localStorage.ContainKeyAsync($"hasLiked/{BlogPost.Id}"))
        {
            return await localStorage.GetItemAsync<bool>($"hasLiked/{BlogPost.Id}");
        }

        return false;
    }
}