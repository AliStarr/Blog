@page "/blogPost/{blogPostId}"
@using Markdig
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.Services
@using LinkDotNet.Blog.Web.Features.ShowBlogPost.Components
@inject IRepository<BlogPost> BlogPostRepository
@inject IJSRuntime JsRuntime
@inject IUserRecordService UserRecordService

@if (BlogPost == null)
{
    <Loading></Loading>
}
else
{
    <PageTitle>@BlogPost.Title</PageTitle>
    <OgData Title="@BlogPost.Title"
            AbsolutePreviewImageUrl="@BlogPost.PreviewImageUrl"
            Description="@(Markdown.ToPlainText(BlogPost.ShortDescription))"
            Keywords="@Tags"></OgData>
    <div class="blog-outer-box">
        <div class="content blog-container">
            <div class="blog-content">
                <header>
                    <h1>@BlogPost.Title</h1></header>
                <div class="blogpost-date">
                    @BlogPost.UpdatedDate.ToString("dd/MM/yyyy")
                </div>

                <div class="admin-action">
                    <BlogPostAdminActions BlogPostId="@BlogPostId"></BlogPostAdminActions>
                </div>

                <div class="blogpost-content">
                    @(MarkdownConverter.ToMarkupString(BlogPost.Content))
                </div>
            </div>
            <div class="d-flex justify-content-between py-2">
                <Like BlogPost="@BlogPost" OnBlogPostLiked="@UpdateLikes"></Like>
                <ShareBlogPost></ShareBlogPost>
            </div>
            <DonationSection></DonationSection>
            <CommentSection></CommentSection>
        </div>
    </div>
}

@code {
    [Parameter]
    public string BlogPostId { get; set; }

    private string Tags => BlogPost?.Tags != null
        ? string.Join(",", BlogPost.Tags.Select(b => b.Content))
        : null;
    
    private BlogPost BlogPost { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        BlogPost = await BlogPostRepository.GetByIdAsync(BlogPostId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userRecordTask = UserRecordService.StoreUserRecordAsync();
            await JsRuntime.InvokeVoidAsync("hljs.highlightAll");
            StateHasChanged();
            await userRecordTask;
        }
    }

    private async Task UpdateLikes(bool hasLiked)
    {
        BlogPost = await BlogPostRepository.GetByIdAsync(BlogPostId);
        BlogPost.Likes = hasLiked ? BlogPost.Likes + 1 : BlogPost.Likes - 1;
        await BlogPostRepository.StoreAsync(BlogPost);
    }
}