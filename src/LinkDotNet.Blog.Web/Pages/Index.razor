@page "/"
@page "/{page:int}"
@using Markdig
@using X.PagedList
@using LinkDotNet.Blog.Web.Shared.Services
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@inject IRepository<BlogPost> blogPostRepository
@inject AppConfiguration appConfiguration
@inject NavigationManager navigationManager
@inject IUserRecordService userRecordService

<OgData Title="@(Markdown.ToPlainText(appConfiguration.BlogName))" 
        AbsolutePreviewImageUrl="@ImageUrl"
        Description="@(Markdown.ToPlainText(appConfiguration.Introduction.Description))"></OgData>
<section class="introduction">
    <IntroductionCard Introduction="appConfiguration.Introduction"></IntroductionCard>
</section>

<section>
    <header>
        <div class="recent-posts">
            <h1>Recent Posts</h1>
        </div>
    </header>
    <div class="content px-4 my-2">
    @for (var i = 0; i < currentPage.Count; i++)
    {
        <ShortBlogPost BlogPost="currentPage[i]" UseAlternativeStyle="@(i % 2 != 0)"></ShortBlogPost>
    }
    </div>
    <BlogPostNavigation PageList="@currentPage"></BlogPostNavigation>
</section>

@code {
    [Parameter]
    public int? Page { get; set; }

    private IPagedList<BlogPost> currentPage = new PagedList<BlogPost>(null, 1, 1);

    private string ImageUrl => appConfiguration.Introduction.ProfilePictureUrl.ToAbsoluteUrl(navigationManager.BaseUri);

    protected override async Task OnParametersSetAsync()
    {
        if (Page is null or < 1)
        {
            Page = 1;
        }

        currentPage = await blogPostRepository.GetAllAsync(
            p => p.IsPublished,
            b => b.UpdatedDate,
            pageSize: appConfiguration.BlogPostsPerPage,
            page: Page.Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await userRecordService.StoreUserRecordAsync();
        }
    }
}